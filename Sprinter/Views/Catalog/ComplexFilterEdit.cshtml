@{
    ViewBag.Title = "Редактирование фильтра";
    Layout = "~/Views/Shared/_Master.cshtml";
}
@model TagComplexFilter
<h2>
    @(Model.ID > 0 ? "Редактирование фильтра" : "Создание фильтра")</h2>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <table style="width: 100%">
            @if (Model.ID == -1)
            {
                <tr>
                    <td>
                        Выберите существующий фильтр
                    </td>
                    <td colspan="2">@Html.DropDownList("Exist", ViewBag.ExistFilters as SelectList)
                    </td>
                </tr>

            }
            else
            {
                <tr>
                    <td>
                        @Html.LabelFor(model => model.Name)
                    </td>
                    <td colspan="2">
                        @Html.TextBoxFor(model => model.Name)
                        @Html.ValidationMessageFor(model => model.Name)
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.LabelFor(model => model.Visible)
                    </td>
                    <td colspan="2">
                        @Html.CheckBoxFor(model => model.Visible)
                        @Html.ValidationMessageFor(model => model.Visible)
                    </td>
                </tr>
                
                <tr>
                    <td colspan="3">
                        <b>Выпадающие списки:</b>
                        <hr />
                    </td>
                </tr>
                <tr>
                    <th style="width: 200px">
                        Название списка
                    </th>
                    <th style="width: 200px">
                        Значение по умолчанию
                    </th>
                    <th>
                        Список тегов (через запятую)
                    </th>
                </tr>
                int counter = 0;
                foreach (var list in Model.FilterList)
                {
                    
                    <tr class="grid-auto">
                        <td>
                            @Html.Hidden("ListID_"+counter, list.ID)
                            @Html.TextBox("ItemHeader_"+counter, list.ItemHeader)
                        </td>
                        <td>
                            @Html.TextBox("DefaultValue_" + counter, list.DefaultValue)
                        </td>
                        <td>
                            @Html.TextBox("TagList_" + counter, list.TagList, new { arg = "tags" })
                        </td>
                    </tr>
                    counter++;
                }
            }
            <tr>
                <td colspan="3">
                    <input type="submit" value="Сохранить" />
                </td>
            </tr>
        </table>
    </fieldset>
}
<div class="backref">
    @Html.ActionLink("Назад к списку", "FilterEdit", new { id = Request.QueryString["page"] })
</div>
@section scripts
{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    <script type="text/javascript">
        var dataLink = '@Url.Action("TagList", "Catalog")';

        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }
        $().ready(function () {
            $('input[arg="tags"]').bind("keydown", function (event) {
                if (event.keyCode === $.ui.keyCode.TAB &&
						$(this).data("autocomplete").menu.active) {
                    event.preventDefault();
                }
            }).autocomplete({
                source: function (request, response) {
                    $.getJSON(dataLink, {
                        term: extractLast(request.term)
                    }, response);
                },
                search: function () {
                    // custom minLength
                    var term = extractLast(this.value);
                    if (term.length < 2) {
                        return false;
                    }
                },
                focus: function () {
                    // prevent value inserted on focus
                    return false;
                },
                select: function (event, ui) {
                    var terms = split(this.value);
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join(", ");
                    return false;
                }



            });

        });
    </script>
}
